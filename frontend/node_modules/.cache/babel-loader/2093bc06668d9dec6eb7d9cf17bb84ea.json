{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Simon\\\\Desktop\\\\Github\\\\Employee lookup\\\\frontend\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this));\nconst express = require(\"express\");\nconst path = require(\"path\");\nconst multer = require(\"multer\");\nconst app = express();\n\n// View Engine Setup\napp.set(\"views\", path.join(__dirname, \"views\"));\napp.set(\"view engine\", \"ejs\");\n\n// var upload = multer({ dest: \"Upload_folder_name\" })\n// If you do not want to use diskStorage then uncomment it\n\nvar storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    // Uploads is the Upload_folder_name\n    cb(null, \"uploads\");\n  },\n  filename: function (req, file, cb) {\n    cb(null, file.fieldname + \"-\" + Date.now() + \".jpg\");\n  }\n});\n\n// Define the maximum size for uploading\n// picture i.e. 1 MB. it is optional\nconst maxSize = 1 * 1000 * 1000;\nvar upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: maxSize\n  },\n  fileFilter: function (req, file, cb) {\n    // Set the filetypes, it is optional\n    var filetypes = /jpeg|jpg|png/;\n    var mimetype = filetypes.test(file.mimetype);\n    var extname = filetypes.test(path.extname(file.originalname).toLowerCase());\n    if (mimetype && extname) {\n      return cb(null, true);\n    }\n    cb(\"Error: File upload only supports the \" + \"following filetypes - \" + filetypes);\n  }\n\n  // mypic is the name of file attribute\n}).single(\"mypic\");\napp.get(\"/\", function (req, res) {\n  res.render(\"Signup\");\n});\napp.post(\"/uploadProfilePicture\", function (req, res, next) {\n  // Error MiddleWare for multer file upload, so if any\n  // error occurs, the image would not be uploaded!\n  upload(req, res, function (err) {\n    if (err) {\n      // ERROR occurred (here it can be occurred due\n      // to uploading image of size greater than\n      // 1MB or uploading different file type)\n      res.send(err);\n    } else {\n      // SUCCESS, image successfully uploaded\n      res.send(\"Success, Image uploaded!\");\n    }\n  });\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","root","createRoot","document","getElementById","render","express","require","path","multer","app","set","join","__dirname","storage","diskStorage","destination","req","file","cb","filename","fieldname","Date","now","maxSize","upload","limits","fileSize","fileFilter","filetypes","mimetype","test","extname","originalname","toLowerCase","single","get","res","post","next","err","send"],"sources":["C:/Users/Simon/Desktop/Github/Employee lookup/frontend/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\nconst express = require(\"express\")\nconst path = require(\"path\")\nconst multer = require(\"multer\")\nconst app = express()\n    \n// View Engine Setup\napp.set(\"views\",path.join(__dirname,\"views\"))\napp.set(\"view engine\",\"ejs\")\n    \n// var upload = multer({ dest: \"Upload_folder_name\" })\n// If you do not want to use diskStorage then uncomment it\n    \nvar storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n  \n        // Uploads is the Upload_folder_name\n        cb(null, \"uploads\")\n    },\n    filename: function (req, file, cb) {\n      cb(null, file.fieldname + \"-\" + Date.now()+\".jpg\")\n    }\n  })\n       \n// Define the maximum size for uploading\n// picture i.e. 1 MB. it is optional\nconst maxSize = 1 * 1000 * 1000;\n    \nvar upload = multer({ \n    storage: storage,\n    limits: { fileSize: maxSize },\n    fileFilter: function (req, file, cb){\n    \n        // Set the filetypes, it is optional\n        var filetypes = /jpeg|jpg|png/;\n        var mimetype = filetypes.test(file.mimetype);\n  \n        var extname = filetypes.test(path.extname(\n                    file.originalname).toLowerCase());\n        \n        if (mimetype && extname) {\n            return cb(null, true);\n        }\n      \n        cb(\"Error: File upload only supports the \"\n                + \"following filetypes - \" + filetypes);\n      } \n  \n// mypic is the name of file attribute\n}).single(\"mypic\");       \n  \napp.get(\"/\",function(req,res){\n    res.render(\"Signup\");\n})\n    \napp.post(\"/uploadProfilePicture\",function (req, res, next) {\n        \n    // Error MiddleWare for multer file upload, so if any\n    // error occurs, the image would not be uploaded!\n    upload(req,res,function(err) {\n  \n        if(err) {\n  \n            // ERROR occurred (here it can be occurred due\n            // to uploading image of size greater than\n            // 1MB or uploading different file type)\n            res.send(err)\n        }\n        else {\n  \n            // SUCCESS, image successfully uploaded\n            res.send(\"Success, Image uploaded!\")\n        }\n    })\n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}